1. [Part (a) WILL BE GRADED]
Given k pairs of lists A_i and B_i (0 <= i < k), each with n sorted numbers, find the n smallest pairs in all k \times n^2 pairs, and we say (x,y) < (x', y') if and only if x+y < x'+y'.
Tie-breaking: lexicographical (i.e., prefer smaller x).

(a) Complete the following code from the midterm.

from heapq import heappush, heappop

def nbest(ABs):             # no need to pass in k or n
    k = len(ABs)
    n = len(ABs[0][0])

    def trypush(i, p, q):   # push pair (A_i,p, B_i,q) if possible
        A, B = ABs[i]       # A_i, B_i
        if p < n and q < n and (i,p,q) not in used:
            heappush(h, ((A[p]+B[q],A[p]),i, p, q,(A[p],B[q])))
            used.add((i, p, q))

    h, used = [],set()     # initialize
    for i in xrange(k):
        trypush(i, 0, 0)

    for _ in xrange(n):
        _, i, p, q,pair = heappop(h)
        yield pair     # return the next pair (in a lazy list)
        trypush(i,p+1,q)
        trypush(i,p,q+1)


Time complexity:
Step1: do k times trypush, each trypush cost O(logk), so this step cost O(k*logk)
Step2: do n times {heappop one element costs O(log(size of heap)), 
       and trypush two elements 2*O(log(size of heap))}, the size of heap initially is k, 
	   but then pop 1 push 2 for each time, so the final size of the heap is k+n, 
	   thus this step cost O(n*log(n+k))
To sum up, the time complexity is O(klogk+nlog(n+k))

Space complexity: O(n+k)


(b) Describe two improvements to make it faster (for the cases where k>>n). Analyze their time complexities.
>>> list(nbest([([1,2,4], [2,3,5]), ([0,2,4], [3,4,5])])) 
[(0, 3), (1, 2), (0, 4)]
>>> list(nbest([([-1,2],[1,4]), ([0,2],[3,4]), ([0,1],[4,6]), ([-1,2],[1,5])])) 
[(-1, 1), (-1, 1)]
>>>list(nbest([([5,6,10,14],[3,5,10,14]),([2,7,9,11],[3,8,12,16]),([1,3,8,10],[5,9,10,11]),([1,2,3,5],[3,4,9,10]),([4,5,9,10],[2,4,6,11]),([4,6,10,13],[2,3,5,9]),([3,7,10,12],[1,2,5,10]),([5,9,14,15],[4,8,13,14])]))
[(1, 3), (3, 1), (1, 4), (2, 3)]
>>>list(nbest([([1,6,8,13],[5,8,11,12]),([1,2,3,5],[5,9,11,13]),([3,5,7,10],[4,6,7,11]),([1,4,7,8],[4,9,11,15]),([4,8,10,13],[4,6,10,11]),([4,8,12,15],[5,10,11,13]),([2,3,4,8],[4,7,11,15]),([4,5,10,15],[5,6,7,8])]))
[(1, 4), (1, 5), (1, 5), (2, 4)]

-------------------------------------------------------------------------------------------
Improve_Method1: 
Time complexity: To make step1 more efficient, we use heapify to build a heap rather than heappush, 
                 so cost O(k) rather than O(klogk), so the final time complexity is O(k+nlog(n+k))
Space complexity: O(n+k)

Improve_Method2: 
Time complexity: Since k is much bigger than n, we use quickselect to pick the first n candidates, 
                 then step2 is do within this n candidates, so the final time complexity is O(k+nlogn)
Space complexity: O(k)
-------------------------------------------------------------------------------------------

2. coins.py
   
   Minimize the number of types of coins.
   >>> best(47, [6, 10, 15])
   (3, [2, 2, 1])
   >>> best(59, [6, 10, 15])
   (3, [4, 2, 1])	
   >>> best(37, [4, 6, 15])
   (3, [4, 1, 1])
   >>> best(27, [4, 6, 15])
   (2, [3, 0, 1])
   >>> best(75, [4, 6, 15])
   (1, [0, 0, 5])
   >>> best(17, [2, 4, 6])
   None
   Note: if impossible, return None.
--------------------------------------------------------------------------------------------------------
dp(x,m): smallest num of types of coins needed, considering first m types of coins only.
dp(x,i+1) = min{ dp(x,i) if i>0 
	     dp(x - j*vi, i)+1 for j=0..inf,  x - j*vi>=0
             }
dp(0,m) = 0
dp(x,0) = INR(x>0)

Time complexity: O(nx)
Space complexity: O(nx)

--------------------------------------------------------------------------------------------------------

In report.txt, don't forget to analyze time/space complexities for 1(a), 1(b), and 2.


Debriefing (required!): --------------------------

0. What's your name?
Hongyan Yi

1. Approximately how many hours did you spend on this assignment?
5 hours

2. Would you rate it as easy, moderate, or difficult?
difficult

3. Did you work on it mostly alone, or mostly with other people?
alone, but get hints from TA's solution.

4. How deeply do you feel you understand the material it covers (0%¨C100%)? 
80%, still confused about the time complexity for nbest Improve_Method2.

5. Did you like the Midterm? If not, which part(s) do you dislike the most?
Question4 and Question6 mine dislike part is that these two questions do not have examples 
or have few examples, if you give enough examples(test cases), 
that would be easier or less time-consuming to understand the meaning of the question. 
I'm running out of time to really understand the meaning of the question.

6. Do you feel this HW (as a second-chance to midterm or as a take-home quiz) is helpful?
Yes, good way to compensate the grade lost in first time midterm.

